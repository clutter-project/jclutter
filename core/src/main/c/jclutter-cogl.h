#include <jni.h>


JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clear(JNIEnv *, jclass, jobject, jlong);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_flush(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rotate(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_scale(JNIEnv *, jclass, jfloat, jfloat, jfloat);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_COGL_getFeatures(JNIEnv *, jclass);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_COGL_featuresAvailable(JNIEnv *, jclass, jint);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_COGL_checkExtension(JNIEnv *, jclass, jstring, jstring);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pushMatrix(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_popMatrix(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_translate(JNIEnv *, jclass, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_frustum(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_perspective(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_ortho(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_viewPort(JNIEnv *, jclass, jint, jint);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_COGL_getViewPort(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_setDepthTestEnabled(JNIEnv *, jclass, jboolean);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_COGL_isDepthTestEnabled(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_setBackfaceCullingEnabled(JNIEnv *, jclass, jboolean);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_COGL_isBackfaceCullingEnabled(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_disableFog(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_setSource(JNIEnv *, jclass, jint, jint, jint, jint);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_setSourceTexture(JNIEnv *, jclass, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_beginGL(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_endGL(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rectangle(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rectangles(JNIEnv *, jclass, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rectangleWithTextureCoords(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rectanglesWithTextureCoords(JNIEnv *, jclass, jfloatArray);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_rectangleWithMultitextureCoords(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloatArray);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_polygon(JNIEnv *, jclass, jobject, jboolean);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathNew(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathMoveTo(JNIEnv *, jclass, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathClose(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathLineTo(JNIEnv *, jclass, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathCurveTo(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathArc(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathRelMoveTo(JNIEnv *, jclass, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathRelLineTo(JNIEnv *, jclass, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathRelCurveTo(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathLine(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_path_polyline(JNIEnv *, jclass, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_path_polygon(JNIEnv *, jclass, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathRectangle(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathRoundRectangle(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathEllipse(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathFill(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathFillPreserve(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathStroke(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_pathStrokePreserve(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clipPushRectangle(JNIEnv *, jclass, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clipPushWindowRectangle(JNIEnv *, jclass, jint, jint, jint, jint);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clipPushFromPath(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clipPushFromPathPreserve(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_clipPop(JNIEnv *, jclass);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_setFramebuffer(JNIEnv *, jclass, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_COGL_popFramebuffer(JNIEnv *, jclass);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_newInstance(JNIEnv *, jclass);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_getRed(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_getGreen(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_getBlue(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_getAlpha(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Color_copyNative(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Color_free(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Color_setFrom(JNIEnv *, jobject, jint, jint, jint, jint);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Material_newInstance(JNIEnv *, jclass);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_CoglTexture_isMaterial(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setColor(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getColor(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setAmbient(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getAmbient(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setDiffuse(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getDiffuse(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setAmbientAndDiffuse(JNIEnv *, jobject, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setEmission(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getEmission(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setSpecular(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getSpecular(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setShininess(JNIEnv *, jobject, jfloat);
JNIEXPORT jfloat JNICALL Java_org_jclutter_cogl_Material_getShininess(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setAlphaTestFunction(JNIEnv *, jobject, jint, jfloat);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_Material_setBlend(JNIEnv *, jobject, jstring);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setBlendConstant(JNIEnv *, jobject, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setLayer(JNIEnv *, jobject, jint, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_removeLayer(JNIEnv *, jobject, jint);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_Material_setLayerCombine(JNIEnv *, jobject, jint, jstring);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setLayerCombineConstant(JNIEnv *, jobject, jint, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setLayerMatrix(JNIEnv *, jobject, jint, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Material_getLayers(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Material_setLayerFilters(JNIEnv *, jobject, jint, jint, jint);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Matrix_getArray(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_rotate(JNIEnv *, jobject, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_scale(JNIEnv *, jobject, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_translate(JNIEnv *, jobject, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_frustum(JNIEnv *, jobject, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_perspective(JNIEnv *, jobject, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_ortho(JNIEnv *, jobject, jfloat, jfloat, jfloat, jfloat, jfloat, jfloat);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_initIdentity(JNIEnv *, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Matrix_multiply(JNIEnv *, jobject, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_Matrix_initFromArray(JNIEnv *, jobject, jobject);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_Matrix_getInverse(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_OffscreenBuffer_newInstance(JNIEnv *, jclass, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_Shader_newInstance(JNIEnv *, jclass, jint);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_CoglTexture_ref(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_CoglTexture_unref(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_newWithSize(JNIEnv *, jclass, jint, jint, jint, jint);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_newFromFile(JNIEnv *, jclass, jstring, jint, jint);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_newFromData(JNIEnv *, jclass, jint, jint, jint, jint, jint, jint, jstring);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_getWidth(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_getHeight(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_getFormat(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_getRowstride(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_CoglTexture_getMaxWaste(JNIEnv *, jobject);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_CoglTexture_isSliced(JNIEnv *, jobject);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_CoglTexture_isVertexBuffer(JNIEnv *, jobject);
JNIEXPORT jstring JNICALL Java_org_jclutter_cogl_CoglTexture_getData(JNIEnv *, jobject, jint, jint);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_CoglTexture_setRegion(JNIEnv *, jobject, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jstring);
JNIEXPORT jboolean JNICALL Java_org_jclutter_cogl_CoglTexture_isOffscreen(JNIEnv *, jobject);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_VertexBuffer_newInstance(JNIEnv *, jclass, jint);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_delete(JNIEnv *, jobject, jstring);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_disable(JNIEnv *, jobject, jstring);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_enable(JNIEnv *, jobject, jstring);
JNIEXPORT jint JNICALL Java_org_jclutter_cogl_VertexBuffer_getVerticesCount(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_submit(JNIEnv *, jobject);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_draw(JNIEnv *, jobject, jint, jint, jint);
JNIEXPORT void JNICALL Java_org_jclutter_cogl_VertexBuffer_drawElements(JNIEnv *, jobject, jint, jobject, jint, jint, jint, jint);
JNIEXPORT jobject JNICALL Java_org_jclutter_cogl_VertexBuffer_indicesGetForQuads(JNIEnv *, jclass, jint);
